# Test specification which will be used with `cargo run`
#
# Configuration contains a list of so called "deciet" units.
# Each deceit provide responses for some set of URIs.
# It is not prohibited to have several deceit units 
# that mock same URI but I do not recommend it.
# 
# Deceit will try to match URI and apply matchers against request.
# On success response processing will be started.
# If deceit level matchers will fail then next deceit will be tried.
# Note that if response level matchig would fail next deceit will not be tried
# and error will be returned instead.

# Mocking users list functionality
[[deceit]]
uris = ["/user/list"]
headers = [["Content-Type", "application/json"]]
matchers = [{ type = "method", eq = "GET" }]

[[deceit.responses]]
matchers = [{ type = "query_arg", name = "name", value = "Ivan" }]
content = """
[
    {"id":42, "name":"Ivan", "surname": "Ivanov"},
]

"""

[[deceit.responses]]
matchers = [{ type = "query_arg", name = "name", value = "Adolph" }]
content = """
[
    {"id":740, "name":"Adolph", "surname": "Greenberg"},
    {"id":741, "name":"Adolph", "surname": "Shtern"},
    {"id":742, "name":"Adolph", "surname": "Feldman"}
]

"""

[[deceit.responses]]
code = 503
matchers = [{ type = "query_arg", name = "name", value = "Rajesh" }]
content = """
{"message": "Impossible to list them all"}

"""

[[deceit.responses]]
content = """
[
    {"id":42, "name":"Ivan", "surname": "Ivanov"},
    {"id":740, "name":"Adolph", "surname": "Greenberg"},
    {"id":741, "name":"Adolph", "surname": "Shtern"},
    {"id":742, "name":"Adolph", "surname": "Feldman"}
]

"""


# Mocking user add functionality
[[deceit]]
uris = ["/user/add"]
json_request = true
headers = [["Content-Type", "application/json"]]
matchers = [{ type = "method", eq = "POST" }]

[[deceit.responses]]
code = 416
matchers = [{ type = "json", path = "$.name", eq = "Rajesh" }]
content = """
{"message": "Rajesh? Too mach of them in this world already! Be creative, find another name!"}

"""

[[deceit.responses]]
code = 406
matchers = [
    { type = "json", path = "$.name", eq = "Adolph" },
    { type = "json", path = "$.surname", eq = "Hitler" },
]
content = """
{"message": "Nun wird Terror mit Terror beantwortet"}

"""

[[deceit.responses]]
content = """
{ "id": 42, "name": "{{ input_json.name }}", "surname": "{{ input_json.surname }}" }

"""


# Mocking user get functionality
[[deceit]]
uris = ["/user/{user_id}", "/user"]
headers = [["Content-Type", "application/json"]]
matchers = [{ type = "method", eq = "GET" }]

# This would match only for /user?id=42
[[deceit.responses]]
matchers = [{ type = "query_arg", name = "id", value = "42" }]
content = """
{"id":42, "name":"Ivan", "surname": "Ivanov"},

"""

# This one is /user/740
[[deceit.responses]]
matchers = [{ type = "path_arg", name = "user_id", value = "740" }]
content = """
{"id":740, "name":"Adolph", "surname": "Greenberg"}

"""

# Also we can use some template engine logick to do tricky  stuff :)
[[deceit.responses]]
content = """
{%- if query_args.id %}
    {%- set id = query_args.id %}
{%- elif path_args.user_id %}
    {%- set id = path_args.user_id %}
{%- else %}
    {%- set _ = response_code(500) %}
{%- endif %}
{%- if id %}
{"id":"{{ id }}", "name":"Rajesh", "surname": "undefined is not a function"}
{%- else %}
{"message":"Unknow ID for some Rajesh or Ivan"}
{%- endif %}

"""
